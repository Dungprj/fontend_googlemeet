import React, { useEffect, useRef, useState } from 'react';
import Peer from 'peerjs';
import createSignalRConnection from '../../../Services/signalRService';
import classNames from 'classnames/bind';
import styles from './VideoCall.module.scss';
import * as signalR from '@microsoft/signalr';

const cx = classNames.bind(styles);

const VideoCall = () => {
    const [peerId, setPeerId] = useState('');
    const [remotePeers, setRemotePeers] = useState([]); // Danh s√°ch ng∆∞·ªùi ƒë√£ k·∫øt n·ªëi
    const [callParticipants, setCallParticipants] = useState([]); // Danh s√°ch ng∆∞·ªùi trong cu·ªôc g·ªçi
    const [meetingId, setMeetingId] = useState(''); // ID cu·ªôc h·ªçp
    const [meetings, setMeetings] = useState([]); // Danh s√°ch c√°c cu·ªôc h·ªçp
    const peerRef = useRef(null);
    const signalRRef = useRef(null);
    const localStreamRef = useRef(null);
    const videoRefs = useRef([]);
    const videoContainerRef = useRef(null); // useRef ƒë·ªÉ qu·∫£n l√Ω container video

    //ki·ªÉm tra bƒÉng th√¥ng
    const checkXirsysBandwidth = async () => {
        try {
            const response = await fetch('https://global.xirsys.net/stat', {
                method: 'GET',
                headers: {
                    Authorization:
                        'Basic ' +
                        btoa('Dungak47:b8163796-e0a5-11ef-9dd3-0242ac130002'),
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok)
                throw new Error(
                    '‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng tin bƒÉng th√¥ng t·ª´ Xirsys'
                );

            const data = await response.json();
            console.log('‚úÖ D·ªØ li·ªáu bƒÉng th√¥ng Xirsys:', data);
            return data; // Tr·∫£ v·ªÅ th√¥ng tin bƒÉng th√¥ng
        } catch (error) {
            console.error('‚ö†Ô∏è L·ªói khi ki·ªÉm tra bƒÉng th√¥ng:', error);
            return null; // Tr·∫£ v·ªÅ null n·∫øu th·∫•t b·∫°i
        }
    };

    //l·∫•y danh s√°ch iceserver t·ª´ api
    const getIceServersFromXirsys = async () => {
        try {
            const response = await fetch(
                'https://global.xirsys.net/_turn/MyFirstApp',
                {
                    method: 'PUT', // API y√™u c·∫ßu ph∆∞∆°ng th·ª©c PUT
                    headers: {
                        Authorization:
                            'Basic ' +
                            btoa(
                                'Dungak47:b8163796-e0a5-11ef-9dd3-0242ac130002'
                            ),
                        'Content-Type': 'application/json'
                    }
                }
            );

            if (!response.ok)
                throw new Error('‚ùå L·ªói khi l·∫•y ICE servers t·ª´ Xirsys');

            const data = await response.json();
            console.log('‚úÖ ICE Servers nh·∫≠n t·ª´ Xirsys:', data.v.iceServers);
            checkXirsysBandwidth().then(data => {
                if (data) {
                    console.log(
                        `üìä T·ªïng bƒÉng th√¥ng ƒë√£ s·ª≠ d·ª•ng: ${data.v.bytesUsed} bytes`
                    );
                    console.log(
                        `üìâ BƒÉng th√¥ng c√≤n l·∫°i: ${data.v.bytesRemaining} bytes`
                    );
                } else {
                    console.log('‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu bƒÉng th√¥ng.');
                }
            });
            return data.v.iceServers; // Tr·∫£ v·ªÅ danh s√°ch ICE servers
        } catch (error) {
            console.error('‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y ICE servers:', error);
            return []; // Tr·∫£ v·ªÅ m·∫£ng r·ªóng n·∫øu th·∫•t b·∫°i
        }
    };

    useEffect(() => {
        let peer = null;

        //kh·ªüi t·∫°o PeerJS v√† l·∫•y connectionId t·ª´ SignalR

        const handleReceiveConnectionId = async connectionId => {
            console.log(
                `üîó Nh·∫≠n SignalR ID, s·ª≠ d·ª•ng l√†m Peer ID: ${connectionId}`
            );
            setPeerId(connectionId);

            // G·ªçi API l·∫•y danh s√°ch ICE Servers t·ª´ Xirsys
            const iceServers = await getIceServersFromXirsys();

            // C·∫•u h√¨nh ICE Servers t·ª´ Xirsys
            const peerConfig = {
                config: {
                    iceServers: iceServers
                }
            };

            // Kh·ªüi t·∫°o PeerJS v·ªõi ICE Server
            peer = new Peer(connectionId, peerConfig);
            peerRef.current = peer;

            peer.on('open', async id => {
                console.log(`‚úÖ PeerJS ƒë√£ kh·ªüi t·∫°o v·ªõi ID: ${id}`);

                // Ki·ªÉm tra xem c√≥ s·ª≠ d·ª•ng STUN/TURN kh√¥ng
                peer.on('iceStateChanged', state => {
                    console.log(`üîÑ Tr·∫°ng th√°i ICE: ${state}`);
                });

                peer.on('iceConnectionStateChange', () => {
                    console.log(
                        `üì° K·∫øt n·ªëi ICE hi·ªán t·∫°i: ${peer.iceConnectionState}`
                    );
                });

                peer.on('iceCandidate', event => {
                    if (event.candidate) {
                        console.log(
                            `üü¢ ICE Candidate nh·∫≠n ƒë∆∞·ª£c:`,
                            event.candidate
                        );
                    } else {
                        console.log('üöÄ ICE Candidate ƒë√£ ho√†n t·∫•t.');
                    }
                });
            });

            peer.on('call', call => {
                call.answer(localStreamRef.current);
                call.on('stream', remoteStream => {
                    addVideo(call.peer, remoteStream);
                });
            });

            try {
                const stream = await navigator.mediaDevices.getUserMedia({
                    video: true,
                    audio: true
                });
                localStreamRef.current = stream;
                addVideo('you', stream, true);
            } catch (error) {
                console.error('‚ùå Kh√¥ng th·ªÉ truy c·∫≠p camera/mic:', error);
            }
        };

        //c·∫≠p nh·∫≠t danh s√°ch ng∆∞·ªùi d√πng ƒë√£ k·∫øt n·ªëi

        const handleUpdateUserList = userList => {
            console.log(
                'üìå Danh s√°ch to√†n b·ªô th√†nh vi√™n ƒë√£ k·∫øt n·ªëi:',
                userList
            );
            setRemotePeers(userList);
        };
        //c·∫≠p nh·∫≠t danh s√°ch cu·ªôc h·ªçp

        const handleUpdateMeetingList = meetingList => {
            console.log('üìÖ Danh s√°ch cu·ªôc h·ªçp:', meetingList);
            setMeetings(meetingList);
        };

        //c·∫≠p nh·∫≠t danh s√°ch ng∆∞·ªùi tham gia cu·ªôc h·ªçp

        const handleUpdateMeetingParticipants = (meetingId, participants) => {
            console.log(
                `üìû Danh s√°ch ng∆∞·ªùi trong cu·ªôc h·ªçp ${meetingId}:`,
                participants
            );
            setCallParticipants(participants);

            // Khi danh s√°ch c·∫≠p nh·∫≠t, g·ªçi video ƒë·∫øn t·∫•t c·∫£ th√†nh vi√™n m·ªõi
            participants.forEach(participant => {
                if (
                    participant !== peerId &&
                    !videoRefs.current.some(video => video.id === participant)
                ) {
                    makeCall(peerRef.current, participant);
                }
            });
        };

        signalRRef.current = createSignalRConnection(
            handleReceiveConnectionId,
            handleUpdateUserList,
            handleUpdateMeetingList,
            handleUpdateMeetingParticipants
        );

        return () => {
            if (signalRRef.current) signalRRef.current.stop();
        };
    }, []);

    // T·∫°o cu·ªôc h·ªçp m·ªõi
    const createMeeting = () => {
        if (meetingId.trim() === '') {
            console.warn('‚ö†Ô∏è Vui l√≤ng nh·∫≠p ID cu·ªôc h·ªçp.');
            return;
        }

        signalRRef.current
            .invoke('CreateMeeting', meetingId)
            .then(() => console.log(`üìÖ ƒê√£ t·∫°o cu·ªôc h·ªçp ${meetingId}`))
            .catch(err => console.error('‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o cu·ªôc h·ªçp:', err));
    };

    // Tham gia cu·ªôc h·ªçp v·ªõi ID c·ª• th·ªÉ
    const joinMeeting = () => {
        if (meetingId.trim() === '') {
            console.warn('‚ö†Ô∏è Vui l√≤ng nh·∫≠p ID cu·ªôc h·ªçp.');
            return;
        }

        signalRRef.current
            .invoke('JoinMeeting', meetingId)
            .then(() => console.log(`‚úÖ ƒê√£ tham gia cu·ªôc h·ªçp ${meetingId}`))
            .catch(err =>
                console.error('‚ö†Ô∏è Kh√¥ng th·ªÉ tham gia cu·ªôc h·ªçp:', err)
            );
    };

    // R·ªùi cu·ªôc h·ªçp hi·ªán t·∫°i (S·ª≠a l·ªói)
    const leaveMeeting = () => {
        if (meetingId.trim() === '') {
            console.warn('‚ö†Ô∏è Vui l√≤ng nh·∫≠p ID cu·ªôc h·ªçp ƒë·ªÉ r·ªùi.');
            return;
        }

        signalRRef.current
            .invoke('LeaveMeeting', meetingId)
            .then(() => {
                console.log(`üö™ ƒê√£ r·ªùi kh·ªèi cu·ªôc h·ªçp ${meetingId}`);

                // Ng·∫Øt k·∫øt n·ªëi PeerJS khi r·ªùi cu·ªôc g·ªçi
                if (peerRef.current) {
                    peerRef.current = null;
                }

                // X√≥a video c·ªßa ng∆∞·ªùi d√πng
                removeVideo(peerId);

                // C·∫≠p nh·∫≠t danh s√°ch ng∆∞·ªùi g·ªçi
                setCallParticipants(prev => prev.filter(pid => pid !== peerId));

                // T·∫Øt mic & camera
                if (localStreamRef.current) {
                    localStreamRef.current
                        .getTracks()
                        .forEach(track => track.stop());
                    localStreamRef.current = null;
                }
            })
            .catch(err => console.error('‚ö†Ô∏è Kh√¥ng th·ªÉ r·ªùi cu·ªôc h·ªçp:', err));
    };

    // G·ªçi ƒë·∫øn m·ªôt Peer trong ph√≤ng h·ªçp
    const makeCall = (peer, targetPeerId) => {
        if (
            !peer ||
            !localStreamRef.current ||
            videoRefs.current.some(video => video.id === targetPeerId)
        )
            return;

        console.log(`üìû G·ªçi ƒë·∫øn: ${targetPeerId}`);

        const call = peer.call(targetPeerId, localStreamRef.current);
        call.on('stream', remoteStream => {
            addVideo(targetPeerId, remoteStream);
        });
    };

    // Th√™m video v√†o giao di·ªán
    const addVideo = (peerId, stream, isLocal = false) => {
        if (videoRefs.current.some(video => video.id === peerId)) return;

        const video = document.createElement('video');
        video.srcObject = stream;
        video.autoplay = true;
        video.muted = isLocal;
        video.style.width = '200px';
        video.style.margin = '5px';
        video.id = peerId;

        if (videoContainerRef.current) {
            videoContainerRef.current.appendChild(video);
        }
        videoRefs.current.push(video);
    };
    // X√≥a video kh·ªèi giao di·ªán khi r·ªùi cu·ªôc h·ªçp
    const removeVideo = peerId => {
        const videoIndex = videoRefs.current.findIndex(
            video => video.id === peerId
        );

        if (videoIndex !== -1) {
            const video = videoRefs.current[videoIndex];

            video.pause();
            video.srcObject = null;
            video.remove();

            videoRefs.current.splice(videoIndex, 1);
        }
    };

    return (
        <div className={cx('container')}>
            <h2>Group Video Call</h2>
            <p>
                Your Peer ID: <strong>{peerId}</strong>
            </p>

            {/* √î nh·∫≠p ID ƒë·ªÉ t·∫°o/join cu·ªôc h·ªçp */}
            <div>
                <input
                    type='text'
                    placeholder='Nh·∫≠p ID cu·ªôc h·ªçp'
                    value={meetingId}
                    onChange={e => setMeetingId(e.target.value)}
                />
                <button onClick={createMeeting}>T·∫°o cu·ªôc h·ªçp</button>
                <button onClick={joinMeeting}>Tham gia cu·ªôc h·ªçp</button>
                <button onClick={leaveMeeting}>R·ªùi cu·ªôc h·ªçp</button>
            </div>

            {/* Danh s√°ch cu·ªôc h·ªçp */}
            <div>
                <h3>Danh s√°ch cu·ªôc h·ªçp:</h3>
                <ul>
                    {meetings.map((meet, index) => (
                        <li key={index}>{meet}</li>
                    ))}
                </ul>
            </div>

            {/* Danh s√°ch ng∆∞·ªùi ƒëang trong cu·ªôc h·ªçp */}
            <div>
                <h3>Th√†nh vi√™n trong cu·ªôc h·ªçp:</h3>
                <ul>
                    {callParticipants.map((pid, index) => (
                        <li key={index}>{pid}</li>
                    ))}
                </ul>
            </div>

            {/* Khu v·ª±c hi·ªÉn th·ªã video */}
            <div ref={videoContainerRef} id='videoContainer'></div>
        </div>
    );
};

export default VideoCall;
